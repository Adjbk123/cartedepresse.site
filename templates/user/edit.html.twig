{% extends 'baseAccueil.html.twig' %}

{% block title %}Mon compte{% endblock %}
{% block breadcrumb %}Compléter mon profil{% endblock %}

{% block body %}
    <form id="profileForm" action="{{ path('app_professionnel_edit', {'id': user.id}) }}" method="POST" enctype="multipart/form-data">
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="prenoms">Prénoms</label>
                    <input type="text" id="prenoms" name="prenoms" class="form-control" value="{{ user.prenoms }}" required>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="nom">Nom</label>
                    <input type="text" id="nom" name="nom" class="form-control" value="{{ user.nom }}" required>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="dateNaissance">Date de naissance</label>
                    <input type="date" id="dateNaissance" name="dateNaissance" class="form-control" value="{{ user.dateNaissance|date('Y-m-d') }}" required>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="lieuNaissance">Lieu de naissance</label>
                    <input type="text" id="lieuNaissance" name="lieuNaissance" class="form-control" value="{{ user.lieuNaissance }}" required>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="npi">Numéro NPI</label>
                    <input type="text" id="npi" name="npi" class="form-control" value="{{ user.npi }}" required>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="nationalite">Nationalité</label>
                    <select id="nationalite" name="nationalite" class="form-control" required>
                        {% for nationality in nationalities %}
                            <option value="{{ nationality }}" {% if user.nationalite == nationality %}selected{% endif %} {% if nationality == 'Béninois(e)' %}selected{% endif %}>{{ nationality }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="organe">Organe</label>
                    <select id="organe" name="organe" class="form-control" required>
                        <option value="">--Sélectionner--</option>
                        {% for organe in organes %}
                            <option value="{{ organe.id }}">{{ organe.designation }}</option>
                        {% endfor %}
                        <option value="autre">AUTRE</option>
                    </select>
                </div>
                <div class="form-group mt-3" id="nouvelOrgane" style="display: none;">
                    <label for="nouvelOrganeNom">Nom du nouvel organe</label>
                    <input type="text" id="nouvelOrganeNom" name="nouvelOrganeNom" class="form-control">
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label for="profession">Profession</label>
                    <select id="profession" name="profession" class="form-control" required>
                        <option value="">--Sélectionner--</option>
                        {% for profession in professions %}
                            <option value="{{ profession.id }}">{{ profession.libelle }}</option>
                        {% endfor %}
                        <option value="autre">AUTRE</option>
                    </select>
                </div>
                <div class="form-group mt-3" id="nouvelleProfession" style="display: none;">
                    <label for="nouvelleProfessionNom">Nom de la nouvelle profession</label>
                    <input type="text" id="nouvelleProfessionNom" name="nouvelleProfessionNom" class="form-control">
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-group">
                    <label for="sexe">Sexe</label>
                    <select id="sexe" name="sexe" class="form-control" required>
                        <option value="">--Sélectionner--</option>
                        <option value="Masculin" {% if user.sexe == 'Masculin' %}selected{% endif %}>Masculin</option>
                        <option value="Féminin" {% if user.sexe == 'Féminin' %}selected{% endif %}>Féminin</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-group">
                    <label for="telephone">Téléphone</label>
                    <input type="text" id="telephone" name="telephone" class="form-control" value="{{ user.telephone }}" required>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="mb-3">
                        <label class="form-label" for="photo">Votre photo</label>
                        <input type="file" id="photo" class="form-control mb-2" name="photo" accept="image/*" required>
                        <canvas id="canvas" style="display: none;"></canvas>
                        <div id="cropper-container" style="width: 100%; max-width: 600px; margin-top: 20px;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="text-center">
            <button type="submit" id="submitButton" class="btn btn-primary">Enregistrer les mises à jour</button>
        </div>
    </form>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script>
        document.getElementById('organe').addEventListener('change', function () {
            var nouvelOrgane = document.getElementById('nouvelOrgane');
            nouvelOrgane.style.display = (this.value === 'autre') ? 'block' : 'none';
        });

        document.getElementById('profession').addEventListener('change', function () {
            var nouvelleProfession = document.getElementById('nouvelleProfession');
            nouvelleProfession.style.display = (this.value === 'autre') ? 'block' : 'none';
        });

        const phoneInput = document.getElementById('telephone');
        const fixedPrefix = '+229 01';

        // Initialiser avec le préfixe
        phoneInput.value = fixedPrefix + ' ';

        // Empêcher la suppression/modification du préfixe
        phoneInput.addEventListener('keydown', function (e) {
            const cursorPosition = this.selectionStart;

            // Bloquer backspace/delete au niveau du préfixe
            if ((e.key === 'Backspace' || e.key === 'Delete') && cursorPosition <= fixedPrefix.length + 1) {
                e.preventDefault();
            }

            // Empêcher de positionner le curseur dans le préfixe
            if (cursorPosition < fixedPrefix.length + 1 && !['ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)) {
                e.preventDefault();
                this.setSelectionRange(fixedPrefix.length + 1, fixedPrefix.length + 1);
            }
        });

        phoneInput.addEventListener('click', function () {
            if (this.selectionStart < fixedPrefix.length + 1) {
                this.setSelectionRange(fixedPrefix.length + 1, fixedPrefix.length + 1);
            }
        });

        // Format automatique en groupes de 2 chiffres
        phoneInput.addEventListener('input', function () {
            let raw = this.value;

            // Garder la partie saisissable
            let numberPart = raw.replace(fixedPrefix, '').replace(/\s+/g, '').replace(/[^\d]/g, '');

            // Limiter à 8 chiffres
            numberPart = numberPart.substring(0, 8);

            // Ajouter espaces tous les 2 chiffres
            let formatted = numberPart.match(/.{1,2}/g)?.join(' ') || '';

            // Réafficher le champ complet
            this.value = fixedPrefix + ' ' + formatted;
        });
    </script>

    <script>
        const photoInput = document.getElementById('photo');
        const canvas = document.getElementById('canvas');
        const cropperContainer = document.getElementById('cropper-container');
        let cropper;

        photoInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = new Image();
                    img.src = e.target.result;
                    img.onload = function () {
                        const ctx = canvas.getContext('2d');
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);

                        // Initialize Cropper.js with fixed dimensions
                        if (cropper) {
                            cropper.destroy();
                        }
                        cropper = new Cropper(canvas, {
                            aspectRatio: 413 / 531,
                            viewMode: 1,
                            preview: cropperContainer,
                            cropBoxResizable: false, // Disable resizing of the crop box
                            cropBoxMovable: true,    // Allow moving the crop box
                            dragMode: 'move',       // Allow moving the image
                            autoCropArea: 1,        // Automatically set the crop box to cover the entire image
                            background: false       // Hide the grid background
                        });

                        // Set the initial crop box to the desired dimensions
                        cropper.setCropBoxData({
                            left: 0,
                            top: 0,
                            width: 413,
                            height: 531
                        });
                    };
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('profileForm').addEventListener('submit', function (event) {
            if (cropper) {
                event.preventDefault(); // ✋ Empêche soumission immédiate

                const croppedCanvas = cropper.getCroppedCanvas({ width: 413, height: 531 });
                croppedCanvas.toBlob((blob) => {
                    const file = new File([blob], 'cropped_photo.jpg', { type: 'image/jpeg' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    const fileInput = document.getElementById('photo');
                    fileInput.files = dataTransfer.files;

                    // 🔁 Soumet le formulaire manuellement une fois prêt
                    event.target.submit();
                }, 'image/jpeg');
            }
        });

    </script>
{% endblock %}
